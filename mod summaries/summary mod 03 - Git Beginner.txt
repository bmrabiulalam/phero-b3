3-1 github Module Introduction
git is source code manager to track file changes

3-2 Install git, create GitHub repository


3-3 Git init, git add, git commit, set origin

git init   // init for initialization
git add README.md
git commit -m "first commit" // commits the final changes
git branch -M main
git remote add origin https://github.com/bmrabiulalam/phero-b3.git // for remote repository
git push -u origin main // push the commits to remote repo


3-4 Git push, git pull
git push to save local repo changes to server
git push to save new commits in server to local repo

3-5 Host simple website in gitHub using gh-pages
git hub pages to host github source codes. 
create gh-pages: goto your source link > settings > github pages > dropdown - select main > save > goto link that says page ready to publish.

browser cache is cleared to remove website data from browser


3-6 [advanced: feel free to skip] git branch and this will confuse you

git branch is used to seperate coding task and simultaneously work on diffrent feature and finally merge them into the main branch

git branch <branch-name> // creates branch only
git checkout -b <branch-name> // creates branch and changes the git head to the new branch

above commands are used to create branch.

now to git push, use::  "git push --set-upstream origin <new-branch>" command

git checkout <branch> is used to move the git head or working directory to the <branch>.

3-7 [advanced] Create git branch, merge branches

git merge is used to merge other branch to the working branch

create a git branch, work in int, add it, commit it and finally push it. now to merge the made changes to the main branch, checkout to main and do "git merge <branch>". 

if both main and branch wants to change the same file, then merge conflict occurs. you can either keep the changes in the main branch or incomming changes from <branch> or both.

then add>commit>push

3-8 [advanced ] Merge conflict and how to avoid it

to avoid merge conflict, you may following steps, though, more advanced way is present out there.

make change to main > add > commit > probly push it too if working remote > then merge it to sub br > now work on any sub branch file

or 

make change to sub branch > add > commit > probly push it too if working remote > then merge it to main
    
3-9 common github related issues faced by new developer

do not do git init

do not save changed files

do not add/commit/push file changes

filename case sensitive in server

want to checkout to a branch that is in server but not in your local device. to checkout, everytime you start working, pull the repo and get all the changes from server.

3-10 GitHub module overall summary